============
Installation
============

Adlibre DMS can be easily installed on any operating system provided that a recent copy of a Python interpreter is
available as well as any dependent system libraries.

Linux Requirements
------------------

Installation under Linux is the most straight forward.

The following system libraries are required:

* Python 2.6
* libtiff,
* poppler,
* a2ps,
* ghostscript

Supported Linux Distributions:

* Debian
* Ubuntu
* CentOS / Red Hat

OS X Requirements
-----------------

On OS X need the following will need to be installed using a 3rd party port / package manager.

You could, for example install the requirements using Mac Ports:

* http://www.macports.org/install.php

For 'magic' based file type validation we require the following:

# port install perl5
# port install p5-file-libmagic

and the following for converter.py to function (libtiff, poppler, a2ps, ghostscript)

# port install tiff
# port install poppler
# port install a2ps
# port install ghostscript

NB. django-plugins has a bug while installing from pip-req.txt. "pip install -r deployment/pip-req.txt" breaks with error.
You have to manually change setup.py of that package. It says about the line with error.
Something called long_description. Change it to whatever string you like in the predownloaded package.
And run "pip install -r deployment/pip-req.txt" again

Windows Requirements
--------------------

For commercial Windows installation support. Please enquire at http://www.adlibre.com.au/

Installation and Deployment
---------------------------

We recommend deployment with _virtualenv_:

You will need to specify Python version if more than one installed eg. --python /usr/bin/python2.6

# mkvirtualenv --no-site-packages dms
# workon dms
# cdvirtualenv
# svn co https://svn.adlibre.net/projects/fasttrack/HEAD/ ./
# pip install -r deployment/pip-req.txt
# ./src/dms/manage.py syncdb
# ./src/dms/manage.py collectstatic

Initial Data
------------

Here is an info about how to populate DB with some
initial data to play with. To do that copy initial test
fixtures and run syncdb.

Do something like this at the fixtures directory,
after that leave to source directory and sync your base:
$ cp test_initial_data.json initial_data.json
$ cd ../src/dms
$ python manage.py syncdb

Output will be something like this:
$ python manage.py syncdb
Creating tables ...
Installing custom SQL ...
Installing indexes ...
Installed 73 object(s) from 1 fixture(s)

It will mean you have sample initial data installed to your DB.

Sample initial data include superuser:

login:     admin
password:  admin

Good idea would be to delete that copied ".json" file, just in case...

Now you may add some test data to the system.
DMS has test files in "fixtures/testdata" directory.
You can run builtin "import_documents" command,
pointing out to this "testdata" directory.
It may look something like this:

$ python manage.py import_documents ../../fixtures/testdata/

This will populate documents folder with initial files,
imported by console command. You may run it several times to get
as much revisions, as you run the command.

Note, they will be deleted, storing with standard names on tests run at least once...
